name: ZorgMate CI/CD Pipeline

on:
  push:
    branches:
      - master
      - 'feature/**'


jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: zorg
          POSTGRES_PASSWORD: 123
          POSTGRES_DB: zorgmate
        options: >-
          --health-cmd="pg_isready -U zorg" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/zorgmate
      SPRING_DATASOURCE_USERNAME: zorg
      SPRING_DATASOURCE_PASSWORD: 123
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean verify

  sonarcloud:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build project (Maven package)
        run: mvn clean package

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=Fantasyfays_ZorgMate \
            -Dsonar.organization=fantasyfays \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.java.binaries=target/classes

deploy:
  needs: sonarcloud
  runs-on: ubuntu-latest
  if: github.ref == 'refs/heads/main'

  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images via Compose
      run: docker-compose -f docker-compose.yml build

    - name: Start containers (test deployment)
      run: docker-compose -f docker-compose.yml up -d

    - name: Show running containers
      run: docker ps
